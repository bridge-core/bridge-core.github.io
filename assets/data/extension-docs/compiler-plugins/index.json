{"hash":"2886fa0f103dc8d75d2204c444a27e62b83d7ccd","data":{"markdownPage":{"id":"b1a07ecb1b7b06aac909e4e34fcff0ef","title":"Compiler Plugins","description":"","path":"/extension-docs/compiler-plugins/","timeToRead":4,"content":"<h1 id=\"compiler-plugins\"><a href=\"#compiler-plugins\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiler Plugins</h1>\n<p>bridge.'s compiler architecture allows anyone to create powerful plugins that can modify the compiler output in almost any way.</p>\n<h2 id=\"compiler-config\"><a href=\"#compiler-config\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiler Config</h2>\n<p>The compiler config tells the compiler which plugins to use in compilation. It should go in the <code>&#x3C;PROJECT NAME>/.bridge/compiler</code> directory and be given any name. The <code>dev</code> compiler mode uses the <code>default.json</code> compiler config and the <code>dist</code> compiler mode allows you to choose from the available modes.</p>\n<p>By default the <code>default.json</code> config should look like this:</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mdi-cogs\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[Default Script]\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[Transforms the \\\"bridge.\\\" folder structure to \\\"com.mojang\\\". \\\"bridge.\\\" runs it automatically in dev mode in the background to enable fast, incremental builds for testing.]\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token string\">\"typeScript\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"entityIdentifierAlias\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"customEntityComponents\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"customItemComponents\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"customBlockComponents\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"customCommands\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"moLang\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span>\n\t\t\t<span class=\"token string\">\"simpleRewrite\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token property\">\"packName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"BridgeTest\"</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code>icon</code>\nSpecifies the <a href=\"https://materialdesignicons.com/\" target=\"_blank\" rel=\"noopener noreferrer\">icon</a> to show on the compiler config in bridge.'s UI.</li>\n<li><code>name</code>\nThe name of the compiler config to show in bridge.'s UI.</li>\n<li><code>description</code>\nA description of the compiler config to show in bridge.'s UI.</li>\n</ul>\n<p><strong>Note: The <code>name</code> and <code>description</code> have square brackets around them so that bridge. doesn't attempt to translate these strings.</strong></p>\n<ul>\n<li><code>plugins</code>\nAn array of values that specify the ids of the compiler plugins to use. The values can either be a string, to simply add the plugin to the compiler, or it can be an array with the first value of the array as the compiler plugin's id and in the second value of the array there should be options for the compiler plugin in an object. For example, see that the <code>\"simpleRewrite\"</code> plugin above contains an argument <code>\"packName\"</code> which is passed to, and used in the plugin.</li>\n</ul>\n<h2 id=\"built-in-compiler-plugins\"><a href=\"#built-in-compiler-plugins\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Built-In Compiler Plugins</h2>\n<p>By default bridge. contains 6 different compiler plugins built-in:</p>\n<ul>\n<li><code>typeScript</code>\nCompiles any TypeScript files in your project into JavaScript. This allows you to use TypeScript for Minecraft's GameTests, Scripting API and bridge.'s custom components and commands.</li>\n<li><code>entityIdentifierAlias</code>\nRegisters entity identifiers to be fetched by the <code>getAlias()</code> function in compiler plugins.</li>\n<li>\n<p><code>customEntityComponents</code>, <code>customItemComponents</code>, <code>customBlockComponents</code>\nProvides custom component functionality for entities, items and blocks. <a href=\"https://bridge-core.app/extension-docs/custom-components/\" target=\"_blank\" rel=\"noopener noreferrer\">Documentation</a>.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>v1CompatMode: boolean</code> Enables v1 custom components. Recommended only for compatibility.</li>\n</ul>\n</li>\n<li>\n<p><code>customCommands</code>\nProvides custom command functionality for use in <code>.mcfunction</code> files and json files where commands are supported. <a href=\"https://bridge-core.app/extension-docs/custom-commands/\" target=\"_blank\" rel=\"noopener noreferrer\">Documentation</a></p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>v1CompatMode: boolean</code> Enables v1 custom commands. Recommended only for compatibility.</li>\n</ul>\n</li>\n<li><code>moLang</code>\nProvides custom MoLang functionality. This allows you to create <code>.molang</code> files and register functions to be used across your project where MoLang is valid.</li>\n<li>\n<p><code>simpleRewrite</code>\nRestructures the compiler output and rewrites your project structure into a structure that Minecraft will understand.</p>\n<p><strong>Arguments:</strong></p>\n<ul>\n<li><code>packName: string</code> The name of the pack. Default: 'Bridge'</li>\n<li><code>rewriteToComMojang: boolean</code> Whether the project is being written to the com.mojang folder. Default: true</li>\n<li><code>buildName: string</code> The name of the build. Default (dependent on compiler mode): 'dev' | 'dist'</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"creating-a-compiler-plugin\"><a href=\"#creating-a-compiler-plugin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating a Compiler Plugin</h2>\n<h3 id=\"registering-a-compiler-plugin\"><a href=\"#registering-a-compiler-plugin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Registering a Compiler Plugin</h3>\n<p>A compiler plugin should be added by putting it in the <code>&#x3C;EXTENSION NAME>/compiler</code> folder of an extension. The plugin can then be registered via the extension manifest.</p>\n<p>In the extension manifest you need a <a href=\"/extension-docs/extension-manifest/#compiler\"><code>\"compiler\"</code></a> property.</p>\n<h3 id=\"compiler-plugin-file-structure\"><a href=\"#compiler-plugin-file-structure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiler Plugin File Structure</h3>\n<p>A compiler plugin should have <code>module.exports</code> set as a function which returns the compiler hooks which you are using, with logic within them.</p>\n<p>Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> blockPath <span class=\"token operator\">=</span> <span class=\"token string\">'BP/blocks'</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filePath<span class=\"token punctuation\">,</span> fileContent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// This would add \"test\" to the end of every block file.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">startsWith</span><span class=\"token punctuation\">(</span>blockPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileContent<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">test</span><span class=\"token template-punctuation string\">`</span></span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This function receives context parameters to be used in the plugin. These are:</p>\n<ul>\n<li><code>fileSystem: FileSystem</code>\nReturns the <a href=\"https://github.com/bridge-core/editor/blob/main/src/components/FileSystem/FileSystem.ts\" target=\"_blank\" rel=\"noopener noreferrer\">FileSystem</a> instance.</li>\n<li><code>outputFileSystem: FileSystem</code>\nReturns the output <a href=\"https://github.com/bridge-core/editor/blob/main/src/components/FileSystem/FileSystem.ts\" target=\"_blank\" rel=\"noopener noreferrer\">FileSystem</a> instance.</li>\n<li><code>hasComMojangDirectory: boolean</code>\nAllows you to check whether the com.mojang folder has been linked.</li>\n<li><code>compileFiles: (files: string[]) => Promise&#x3C;void></code>\nA function allowing you to force compilation on a list of file paths.</li>\n<li><code>getAliases: (filePath: string) => string[]</code>\nReturns all aliases registered in the <code>registerAliases()</code> hook for a given file path.</li>\n<li><code>targetVersion: string</code>\nAllows you to read the project target version.</li>\n<li>\n<p><code>options: { mode: 'dev' | 'build', isFileRequest: boolean, restartDevServer: boolean, [key: string]: any}</code></p>\n<ul>\n<li><code>mode: 'dev' | 'build'</code>\nAllows you to read the current compiler mode.</li>\n<li><code>isFileRequest: boolean</code>\nSome of bridge.'s core components manually request a file to be compiled.\nThese file requests don't necessarily need to represent an underlying file on your disk.\n(Example: The particle preview requests a compilation of an unsaved particle file)</li>\n<li><code>restartDevServer: boolean</code>\nWhether this compilation is the dev server being restarted.</li>\n<li><code>[key: string]: any</code>\nAllows you to access any arguments passed to the plugin in the compiler config.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"compiler-hooks\"><a href=\"#compiler-hooks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiler Hooks</h3>\n<pre class=\"language-ts\"><code class=\"language-ts\">\t<span class=\"token doc-comment comment\">/**\n\t * Runs once before a build process starts\n\t */</span>\n\t<span class=\"token function\">buildStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span>\n\t<span class=\"token doc-comment comment\">/**\n\t * Register files that should be loaded too\n\t */</span>\n\t<span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Maybe<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Transform file path\n\t * - E.g. adjust file path to point to build folder\n\t * - Return null to omit file from build output\n\t */</span>\n\t<span class=\"token function\">transformPath</span><span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Maybe<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Read the file at `filePath` and return its content\n\t * - Return null/undefined to just copy the file over\n\t */</span>\n\t<span class=\"token function\">read</span><span class=\"token punctuation\">(</span>\n\t\tfilePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\tfileHandle<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>File<span class=\"token operator\">></span> <span class=\"token operator\">|</span> File <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Load the fileContent and bring it into a usable form\n\t */</span>\n\t<span class=\"token function\">load</span><span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fileContent<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Provide alternative lookups for a file\n\t * - E.g. custom component names\n\t */</span>\n\t<span class=\"token function\">registerAliases</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fileContent<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Maybe<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Register that a file depends on other files\n\t */</span>\n\t<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> fileContent<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Maybe<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Transform a file's content\n\t */</span>\n\t<span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>\n\t\tfilePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\tfileContent<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\tdependencies<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n\t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Prepare data before it gets written to disk\n\t */</span>\n\t<span class=\"token function\">finalizeBuild</span><span class=\"token punctuation\">(</span>\n\t\tfilePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\tfileContent<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Maybe<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> Uint8Array <span class=\"token operator\">|</span> ArrayBuffer <span class=\"token operator\">|</span> Blob<span class=\"token operator\">></span>\n\n\t<span class=\"token doc-comment comment\">/**\n\t * Runs once after a build process ended\n\t */</span>\n\t<span class=\"token function\">buildEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span></code></pre>\n<h2 id=\"examples\"><a href=\"#examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Examples</h2>\n<ul>\n<li><a href=\"https://github.com/bridge-core/plugins/tree/master/plugins/textureList\" target=\"_blank\" rel=\"noopener noreferrer\">Texture List Generator</a></li>\n<li><a href=\"https://github.com/bridge-core/plugins/tree/master/plugins/jsonEncoder\" target=\"_blank\" rel=\"noopener noreferrer\">JSON Encoder</a></li>\n<li><a href=\"https://github.com/bridge-core/plugins/tree/master/plugins/CustomEntitySyntax\" target=\"_blank\" rel=\"noopener noreferrer\">Custom Entity Syntax</a> <strong>This plugin uses [</strong>rollup.js<strong>](<a href=\"https://www.rollupjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.rollupjs.org/</a>) to bundle third party packages into the plugin.</strong></li>\n</ul>\n","sidebar":"extensions","next":"","prev":"","author":null,"headings":[{"depth":1,"value":"Compiler Plugins","anchor":"#compiler-plugins"},{"depth":2,"value":"Compiler Config","anchor":"#compiler-config"},{"depth":2,"value":"Built-In Compiler Plugins","anchor":"#built-in-compiler-plugins"},{"depth":2,"value":"Creating a Compiler Plugin","anchor":"#creating-a-compiler-plugin"},{"depth":3,"value":"Registering a Compiler Plugin","anchor":"#registering-a-compiler-plugin"},{"depth":3,"value":"Compiler Plugin File Structure","anchor":"#compiler-plugin-file-structure"},{"depth":3,"value":"Compiler Hooks","anchor":"#compiler-hooks"},{"depth":2,"value":"Examples","anchor":"#examples"}],"fileInfo":{"path":"extension-docs/compiler-plugins.md"}},"allMarkdownPage":{"edges":[{"node":{"path":"/extension-docs/scripts/modules/bridge-windows/","title":"@bridge/windows"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-utils/","title":"@bridge/utils"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-ui/","title":"@bridge/ui"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-toolbar/","title":"@bridge/toolbar"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-theme/","title":"@bridge/theme"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-tab/","title":"@bridge/tab"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-tab-actions/","title":"@bridge/tab-actions"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-sidebar/","title":"@bridge/sidebar"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-project/","title":"@bridge/project"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-path/","title":"@bridge/path"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-notifications/","title":"@bridge/notifications"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-monaco/","title":"@bridge/monaco"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-json5/","title":"@bridge/json5"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-globals/","title":"@bridge/globals"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-fs/","title":"@bridge/fs"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-file-importer/","title":"@bridge/file-importer"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-fetch-definition/","title":"@bridge/fetch-definition"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-env/","title":"@bridge/env"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-compare-versions/","title":"@bridge/compare-versions"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-com-mojang/","title":"@bridge/com-mojang"}},{"node":{"path":"/extension-docs/scripts/interfaces/signal/","title":"Signal<T\\>"}},{"node":{"path":"/extension-docs/scripts/interfaces/sidebarelement/","title":"SidebarElement"}},{"node":{"path":"/extension-docs/scripts/interfaces/itabpreviewconfig/","title":"ITabPreviewConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/itabactionconfig/","title":"ITabActionConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/isidebarconfig/","title":"ISidebarConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/inotificationconfig/","title":"INotificationConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/imkdirconfig/","title":"IMkdirConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/igethandleconfig/","title":"IGetHandleConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/iexporter/","title":"IExporter"}},{"node":{"path":"/extension-docs/scripts/interfaces/idisposable/","title":"IDisposable"}},{"node":{"path":"/extension-docs/scripts/interfaces/builtin/","title":"BuiltIn"}},{"node":{"path":"/extension-docs/scripts/","title":"Scripts"}},{"node":{"path":"/extension-docs/other/default-file-types/","title":"Default File Types"}},{"node":{"path":"/extension-docs/json/themes/","title":"Themes"}},{"node":{"path":"/extension-docs/json/snippets/","title":"Snippets"}},{"node":{"path":"/extension-docs/json/presets/","title":"Presets"}},{"node":{"path":"/extension-docs/json/lightning-cache/","title":"Lightning Cache"}},{"node":{"path":"/extension-docs/json/file-definitions/","title":"File Definitions"}},{"node":{"path":"/editor-docs/other/molang/","title":"MoLang"}},{"node":{"path":"/editor-docs/other/model-viewer/","title":"model-viewer"}},{"node":{"path":"/editor-docs/migration-guide/","title":"bridge. v2 Migration"}},{"node":{"path":"/editor-docs/getting-started/","title":"Getting Started"}},{"node":{"path":"/editor-docs/faq/","title":"FAQ"}},{"node":{"path":"/extension-docs/","title":"Extension API"}},{"node":{"path":"/extension-docs/extension-manifest/","title":"Extension Manifest"}},{"node":{"path":"/extension-docs/custom-molang/","title":"Custom MoLang"}},{"node":{"path":"/extension-docs/custom-components/","title":"Custom Components"}},{"node":{"path":"/extension-docs/custom-commands/","title":"Custom Commands"}},{"node":{"path":"/extension-docs/contributing/","title":"Contributing Extensions"}},{"node":{"path":"/extension-docs/compiler-plugins/","title":"Compiler Plugins"}},{"node":{"path":"/editor-docs/","title":"Editor"}},{"node":{"path":"/editor-docs/features/","title":"Feature Overview"}}]}},"context":{}}