{"hash":"88bddb106dd192cc910b3b6374a3f5345472493f","data":{"markdownPage":{"id":"cda08553b69de423a7c2a0b153bdaf7e","title":"Custom Components","description":"","path":"/extension-docs/custom-components/","timeToRead":6,"content":"<h1 id=\"custom-components\"><a href=\"#custom-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom Components</h1>\n<h2 id=\"general\"><a href=\"#general\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>General</h2>\n<p>bridge. allows you to define new entity, block and item components to make writing long and complex and repetitive behaviors quicker. In order to get started, navigate to the \"Custom Components\" tab in the preset window and fill in the options, so whether you want to write the component in TypeScript or JavaScript and the file name, as well as whether you want to create an item, entity or block component. If you are creating the component outside of bridge., or in an extension, you need to create a js or ts file in the <code>BP/components/&#x3C;COMPONENT TYPE></code> or <code>&#x3C;EXTENSION NAME>/components/&#x3C;COMPONENT TYPE></code> folder.</p>\n<h2 id=\"execution-scope\"><a href=\"#execution-scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Execution Scope</h2>\n<h3 id=\"definecomponent\"><a href=\"#definecomponent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code>defineComponent</code></h3>\n<p>Custom components have access to the <code>defineComponent</code> function, which looks like this:</p>\n<p><code>defineComponent({ name: (name: string) => void, schema: (schema: any) => void, template: (templateFunction: (componentArgs: T, opts: TemplateContext) => void) => void }): void</code></p>\n<p>Arguments:</p>\n<ul>\n<li><code>name(name: string): void</code>\nThe name of the custom component that will show up in auto-completions.</li>\n<li><code>schema(schema: any): void</code>\nThe schema of the component. This is used to create auto-completions for custom component arguments and should be written in <a href=\"https://json-schema.org\" target=\"_blank\" rel=\"noopener noreferrer\">standard JSON schema</a>. You can also access bridge.'s built-in auto-completions with the <code>$ref</code> property. They can be found <a href=\"https://github.com/bridge-core/editor-packages/tree/main/packages/minecraftBedrock/schema\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> and should be referenced from the <code>data</code> folder root, for example <code>$ref: '/data/packages/minecraftBedrock/schema/general/slotType.json'</code> would access slot type auto-completions.</li>\n<li><code>template(templateFunction: (componentArgs: any, opts: TemplateContext) => void): void</code>\nThe <code>templateFunction</code> receives <code>componentArgs</code> which is the component arguments defined by the user, and the <code>opts</code> provides functions to allow you to merge data with the file that the component is created on and allows you to create animations and animation controllers.</li>\n</ul>\n<h3 id=\"templatecontext\"><a href=\"#templatecontext\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code>TemplateContext</code></h3>\n<h4 id=\"common\"><a href=\"#common\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Common</h4>\n<ul>\n<li><code>compilerMode: 'build' | 'dev'</code>\nGives you access to read the current compiler mode.</li>\n<li><code>create(template: any, location?: string, operation?: (deepMerge: (oldData: any, newData: any) => any, oldData: any, newData: any) => any): void</code>\nAllows you to create data inside of the entity/block/item that the component is in. <code>template</code> should be a JavaScript object of the data to merge with the file at the given <code>location</code>. <code>location</code> should be a path separated by <code>'/'</code> to where you want the <code>template</code> to be created. For example: <code>minecraft:entity/description</code>. The default merge behaviour can optionally be overridden with <code>operation</code> which should be a function that takes default merge function <code>deepMerge</code>, the data at <code>location</code> (<code>oldData</code>) and the new data being merged in (<code>newData</code>). It should return the result of the custom merge. For example: <code>(deepMerge, oldData, newData) => newData</code> will overwrite the data at <code>location</code>.</li>\n<li><code>location: string</code>\nGives you access to the location of the component in the entity/block/item file.</li>\n<li><code>identifier: string</code>\nGives you access to the identifier of the entity/block/item that the component is in.</li>\n</ul>\n<h4 id=\"entity\"><a href=\"#entity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Entity</h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TemplateContext</span> <span class=\"token punctuation\">{</span>\n\tcompilerMode<span class=\"token operator\">:</span> <span class=\"token string\">'build'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'dev'</span>\n\tcreate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\ttemplate<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\tlocation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\toperation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token function-variable function\">deepMerge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> newData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\toldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\tnewData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">sourceEntity</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\t<span class=\"token function-variable function\">animation</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>animation<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> condition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">animationController</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\tanimationController<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\tcondition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\tlocation<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tidentifier<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tprojectNamespace<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tclient<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\tcreate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>clientEntity<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> formatVersion <span class=\"token operator\">=</span> <span class=\"token string\">\"1.10.0\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function-variable function\">dialogueScene</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sceneDefinition<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> openDialogue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">onActivated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>eventResponse<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">onDeactivated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>eventResponse<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">lootTable</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>lootTable<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function-variable function\">tradeTable</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>tradeTable<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function-variable function\">spawnRule</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>spawnRule<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code>sourceEntity(): any</code>\nAccess the source entity that your component currently gets applied to.</li>\n<li><code>animation(animation: any, condition?: string | false): void</code>\nAllows you to create a BP animation that is automatically linked to the entity. <code>animation</code> should be a JavaScript object containing the animation data that should be added to the animation name. <code>condition</code> is an optional parameter that allows you to set a molang condition for the animation to be run.</li>\n<li><code>animationController(animationController: any, condition?: string | false): void</code>\nAllows you to create a BP animation controller that is automatically linked to the entity. <code>animationController</code> should be a JavaScript object containing the animation controller data that should be added to the animation controller name. <code>condition</code> is an optional parameter that allows you to set a molang condition for the animation controller to be run.</li>\n<li><code>client.create(clientEntity: any, formatVersion?: string): void</code>\nCreate a new client entity file for entities that use the custom component.</li>\n<li><code>onActivated(eventResponse: any): void</code>\nTrigger an event reponse whenever your component gets applied to this entity</li>\n<li><code>onDeactivated(eventResponse: any): void</code>\nTrigger an event reponse whenever your component gets removed from this entity</li>\n<li><code>dialogueScene(sceneDefinition: any, openDialogue?: boolean): void</code>\nCreates a new dialogue scene to be used within your add-on. This function is only available if your project target version is at least \"1.17.40\"</li>\n<li><code>lootTable(lootTable: any): string</code>\nReturns a string that points to your defined loot table</li>\n<li><code>tradeTable(tradeTable: any): string</code>\nReturns a string that points to your defined trade table</li>\n<li><code>spawnRule(spawnRule: any): void</code>\nCreates a new spawn rule file for entities that use the custom component</li>\n</ul>\n<h4 id=\"item\"><a href=\"#item\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Item</h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TemplateContext</span> <span class=\"token punctuation\">{</span>\n\tcompilerMode<span class=\"token operator\">:</span> <span class=\"token string\">'build'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'dev'</span>\n\tcreate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\ttemplate<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\tlocation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\toperation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token function-variable function\">deepMerge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> newData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\toldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\tnewData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\tlocation<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tidentifier<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tprojectNamespace<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function-variable function\">sourceItem</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\tplayer<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\tcreate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\t\ttemplate<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\tlocation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\t\toperation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\t\t\t<span class=\"token function-variable function\">deepMerge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> newData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\t\toldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\t\tnewData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\t\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t\t<span class=\"token function-variable function\">animation</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>animation<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> condition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t\t<span class=\"token function-variable function\">animationController</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\t\tanimationController<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\tcondition<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span>\n\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function-variable function\">lootTable</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>lootTable<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function-variable function\">recipe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>recipe<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code>sourceItem(): any</code>\nAccess the source item that your component currently gets applied to.</li>\n</ul>\n<p>The <code>player</code> object gives access to these functions:</p>\n<ul>\n<li><code>animation(animation: any, condition?: string | false): void</code>\nAllows you to create a BP animation that is automatically linked to the player. <code>animation</code> should be a JavaScript object containing the animation data that should be added to the animation name. <code>condition</code> is an optional parameter that allows you to set a molang condition for the animation to be run.</li>\n<li><code>animationController(animationController: any, condition?: string | false): void</code>\nAllows you to create a BP animation controller that is automatically linked to the player. <code>animationController</code> should be a JavaScript object containing the animation controller data that should be added to the animation controller name. <code>condition</code> is an optional parameter that allows you to set a molang condition for the animation controller to be run.</li>\n<li><code>create(template: any, location?: string): void</code>\nAllows you to create data inside of the player. <code>template</code> should be a JavaScript object of the data to merge into the player behavior file at the given <code>location</code>. <code>location</code> should be a path separated by <code>'/'</code> to where you want the <code>template</code> to be created. For example: <code>minecraft:entity/description</code>. The default merge behaviour can optionally be overridden with <code>operation</code> which should be a function that takes default merge function <code>deepMerge</code>, the data at <code>location</code> (<code>oldData</code>) and the new data being merged in (<code>newData</code>). It should return the result of the custom merge. For example: <code>(deepMerge, oldData, newData) => newData</code> will overwrite the data at <code>location</code>.</li>\n<li><code>lootTable(lootTable: any): string</code>\nReturns a string that points to your defined loot table</li>\n<li><code>recipe(recipe: any): void</code>\nCreates a new recipe for items that use the custom component</li>\n</ul>\n<h4 id=\"block\"><a href=\"#block\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Block</h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TemplateContext</span> <span class=\"token punctuation\">{</span>\n\tcompilerMode<span class=\"token operator\">:</span> <span class=\"token string\">'build'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'dev'</span>\n\tcreate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\ttemplate<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\tlocation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n\t\toperation<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token function-variable function\">deepMerge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>oldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> newData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\toldData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n\t\t\tnewData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span>\n\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">sourceBlock</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n\tlocation<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tidentifier<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\tprojectNamespace<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function-variable function\">onActivated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>eventResponse<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">onDeactivated</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>eventResponse<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\t<span class=\"token function-variable function\">lootTable</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>lootTable<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span>\n\t<span class=\"token function-variable function\">recipe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>recipe<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><code>sourceBlock(): any</code>\nAccess the source block that your component currently gets applied to.</li>\n<li><code>onActivated(eventResponse: any): void</code>\nTrigger an event reponse whenever your component gets applied to this block</li>\n<li><code>onDeactivated(eventResponse: any): void</code>\nTrigger an event reponse whenever your component gets removed from this block</li>\n<li><code>lootTable(lootTable: any): string</code>\nReturns a string that points to your defined loot table</li>\n<li><code>recipe(recipe: any): void</code>\nCreates a new recipe for blocks that use the custom component</li>\n</ul>\n<h3 id=\"creating-files\"><a href=\"#creating-files\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating Files</h3>\n<p>Files can also be automatically created with custom components. Functions that can be called to create files are:</p>\n<ul>\n<li><code>animation(animation: any, condition: string | false): string</code> which returns the name of the animation</li>\n<li><code>animationController(animationController: any, condition: string | false): string</code> which returns the name of the animation controller</li>\n<li><code>client.create(clientEntity: any, formatVersion?: string): void</code></li>\n<li><code>dialogueScene(sceneDefinition: any, openDialogue?: boolean): void</code></li>\n</ul>\n<h2 id=\"extension-manifest\"><a href=\"#extension-manifest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Extension Manifest</h2>\n<p>When you are creating a custom component in an extension you need to specify where it should be installed in the extension manifest using the <a href=\"/extension-docs/extension-manifest/#contributeFiles\"><code>contributeFiles</code></a> field.</p>\n<h2 id=\"example\"><a href=\"#example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>Examples can be found here:</p>\n<ul>\n<li><a href=\"https://github.com/bridge-core/plugins/tree/master/plugins/ItemEquippedSensorV2\" target=\"_blank\" rel=\"noopener noreferrer\">ItemEquippedSensor</a></li>\n<li><a href=\"https://github.com/bridge-core/plugins/tree/master/plugins/BlockRotationV2\" target=\"_blank\" rel=\"noopener noreferrer\">SimpleBlockRotation</a></li>\n</ul>\n","sidebar":"extensions","next":"","prev":"","author":null,"headings":[{"depth":1,"value":"Custom Components","anchor":"#custom-components"},{"depth":2,"value":"General","anchor":"#general"},{"depth":2,"value":"Execution Scope","anchor":"#execution-scope"},{"depth":3,"value":"defineComponent","anchor":"#definecomponent"},{"depth":3,"value":"TemplateContext","anchor":"#templatecontext"},{"depth":4,"value":"Common","anchor":"#common"},{"depth":4,"value":"Entity","anchor":"#entity"},{"depth":4,"value":"Item","anchor":"#item"},{"depth":4,"value":"Block","anchor":"#block"},{"depth":3,"value":"Creating Files","anchor":"#creating-files"},{"depth":2,"value":"Extension Manifest","anchor":"#extension-manifest"},{"depth":2,"value":"Example","anchor":"#example"}],"fileInfo":{"path":"extension-docs/custom-components.md"}},"allMarkdownPage":{"edges":[{"node":{"path":"/extension-docs/scripts/modules/bridge-windows/","title":"@bridge/windows"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-utils/","title":"@bridge/utils"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-ui/","title":"@bridge/ui"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-toolbar/","title":"@bridge/toolbar"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-theme/","title":"@bridge/theme"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-tab/","title":"@bridge/tab"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-tab-actions/","title":"@bridge/tab-actions"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-sidebar/","title":"@bridge/sidebar"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-project/","title":"@bridge/project"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-path/","title":"@bridge/path"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-notifications/","title":"@bridge/notifications"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-monaco/","title":"@bridge/monaco"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-json5/","title":"@bridge/json5"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-globals/","title":"@bridge/globals"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-fs/","title":"@bridge/fs"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-file-importer/","title":"@bridge/file-importer"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-fetch-definition/","title":"@bridge/fetch-definition"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-env/","title":"@bridge/env"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-compare-versions/","title":"@bridge/compare-versions"}},{"node":{"path":"/extension-docs/scripts/modules/bridge-com-mojang/","title":"@bridge/com-mojang"}},{"node":{"path":"/extension-docs/scripts/interfaces/signal/","title":"Signal<T\\>"}},{"node":{"path":"/extension-docs/scripts/interfaces/sidebarelement/","title":"SidebarElement"}},{"node":{"path":"/extension-docs/scripts/interfaces/itabpreviewconfig/","title":"ITabPreviewConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/itabactionconfig/","title":"ITabActionConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/isidebarconfig/","title":"ISidebarConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/inotificationconfig/","title":"INotificationConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/imkdirconfig/","title":"IMkdirConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/igethandleconfig/","title":"IGetHandleConfig"}},{"node":{"path":"/extension-docs/scripts/interfaces/iexporter/","title":"IExporter"}},{"node":{"path":"/extension-docs/scripts/interfaces/idisposable/","title":"IDisposable"}},{"node":{"path":"/extension-docs/scripts/interfaces/builtin/","title":"BuiltIn"}},{"node":{"path":"/extension-docs/scripts/","title":"Scripts"}},{"node":{"path":"/extension-docs/other/default-file-types/","title":"Default File Types"}},{"node":{"path":"/extension-docs/json/themes/","title":"Themes"}},{"node":{"path":"/extension-docs/json/snippets/","title":"Snippets"}},{"node":{"path":"/extension-docs/json/presets/","title":"Presets"}},{"node":{"path":"/extension-docs/json/lightning-cache/","title":"Lightning Cache"}},{"node":{"path":"/extension-docs/json/file-definitions/","title":"File Definitions"}},{"node":{"path":"/editor-docs/other/molang/","title":"MoLang"}},{"node":{"path":"/editor-docs/other/model-viewer/","title":"model-viewer"}},{"node":{"path":"/editor-docs/migration-guide/","title":"bridge. v2 Migration"}},{"node":{"path":"/editor-docs/getting-started/","title":"Getting Started"}},{"node":{"path":"/editor-docs/faq/","title":"FAQ"}},{"node":{"path":"/extension-docs/","title":"Extension API"}},{"node":{"path":"/extension-docs/extension-manifest/","title":"Extension Manifest"}},{"node":{"path":"/extension-docs/custom-molang/","title":"Custom MoLang"}},{"node":{"path":"/extension-docs/custom-components/","title":"Custom Components"}},{"node":{"path":"/extension-docs/custom-commands/","title":"Custom Commands"}},{"node":{"path":"/extension-docs/contributing/","title":"Contributing Extensions"}},{"node":{"path":"/extension-docs/compiler-plugins/","title":"Compiler Plugins"}},{"node":{"path":"/editor-docs/","title":"Editor"}},{"node":{"path":"/editor-docs/features/","title":"Feature Overview"}}]}},"context":{}}